name: Rust CI & Release

on:
  # ✅ 自动触发：当推送符合 vX.Y.Z 格式的 tag 时触发
  push:
    tags:
      - 'v*.*.*'

  # ✅ 手动触发：可以在 Actions 页面点击 “Run workflow” 运行
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag name for manual release (e.g., v1.2.3)'
        required: false
        default: 'manual-release'
      target:
        description: 'Build target (all, linux, windows, macos)'
        required: false
        default: 'all'
        type: string

jobs:
  build-linux-windows:
    name: Build & Test Linux/Windows
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.target == 'all' || github.event.inputs.target == 'linux' || github.event.inputs.target == 'windows' || startsWith(github.ref, 'refs/tags/') }}
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, x86_64-pc-windows-gnu]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Add Windows target tools
        if: matrix.target == 'x86_64-pc-windows-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y mingw-w64

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Run tests
        run: cargo test --release --target ${{ matrix.target }}

      - name: Archive binary
        run: |
          BINARY_NAME=rsdish
          if [[ "${{ matrix.target }}" == *windows* ]]; then
            ZIP_NAME=${BINARY_NAME}-${{ matrix.target }}.zip
            zip $ZIP_NAME target/${{ matrix.target }}/release/${BINARY_NAME}.exe
          else
            TAR_NAME=${BINARY_NAME}-${{ matrix.target }}.tar.gz
            tar -czvf $TAR_NAME -C target/${{ matrix.target }}/release $BINARY_NAME
          fi

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name || github.event.inputs.tag }}
          files: |
            *.zip
            *.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos:
    name: Build & Test macOS
    runs-on: macos-latest
    if: ${{ github.event.inputs.target == 'all' || github.event.inputs.target == 'macos' || startsWith(github.ref, 'refs/tags/') }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-apple-darwin
          override: true

      - name: Build
        run: cargo build --release --target x86_64-apple-darwin

      - name: Run tests
        run: cargo test --release --target x86_64-apple-darwin

      - name: Archive binary
        run: |
          BINARY_NAME=rsdish
          TAR_NAME=${BINARY_NAME}-x86_64-apple-darwin.tar.gz
          tar -czvf $TAR_NAME -C target/x86_64-apple-darwin/release $BINARY_NAME

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name || github.event.inputs.tag }}
          files: |
            *.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
